<h1> <%= @q.title %> </h1>
<p> <%= @q.body %> </p>

<% if @q.user %>
<p>
  Created by:
  <!-- call to full_name method in user model -->
  <%= @q.user.full_name %>
</p>
<% end  %>

<% if @q.tags.any? %>
Tagged with:
  <% @q.tags.each do |tag| %>
  <div class="label label-primary"><%= tag.name %></div>
  <% end %>
<% end  %>
<!-- passes edit to 'can :manage, Question do |q|' -->
<% if can? :edit, @q %>
<%= link_to "Edit", edit_question_path(@q), class: "btn btn-info btn-sm" %>
<% end  %>
<% if can? :destroy, @q %>
<%= link_to("Delete", question_path(@q), {method: :delete,
                                          class: "btn btn-danger btn-sm",
                                          data: {confirm: "Are you sure?"}})%>
<% end  %>

<div class="">

<!-- likes -->
<% if user_signed_in? && @q.liked_by?(current_user) %>
                                            <!-- note because like_for is not a helper method, need to add @q.like_for to reach the method in Question.rb -->
  <%= link_to fa_icon("thumbs-up"), question_like_path(@q, @q.like_for(current_user)), class: "icon-big", method: :delete %>
<% else %>
  <%= link_to fa_icon("thumbs-o-up"), question_likes_path(@q), class: "icon-big", method: :post %>
<% end %>
Liked: <%= pluralize(@q.likes.count, "time") %>

<!-- favourites -->
<% if user_signed_in? && @q.favourited_by?(current_user) %>
                                            <!-- because not helper method, need to add @q.like_for to reach the method in Question.rb -->
  <%= link_to fa_icon("star"), [@q, @q.favourite_for(current_user)], class: "icon-big", method: :delete %>
                          <!-- replace 'question_favourite_path(@q, @q.favourite_for(current_user))' with shortcut [@q, @q.favourite_for(current_user)]-->
<% else %>
  <%= link_to fa_icon("star-o"), question_favourites_path(@q), class: "icon-big", method: :post %>
<% end %>
Faved: <%= pluralize(@q.favourites.count, "time") %>

<!-- Voting -->
  <!-- if not signed in or the current user has not voted on this question -->
  <% if !user_signed_in? || !@q.voted_on_by?(current_user) %>
                                          <!-- passing 'is_up' via params, and using vote as a key to access  -->
    <%= link_to fa_icon("arrow-up"), question_votes_path(@q, {vote: {is_up: true}}), class: "icon-big", method: :post %>
    <%= link_to fa_icon("arrow-down"), question_votes_path(@q, {vote: {is_up: false}}), class: "icon-big", method: :post %>
  <% elsif @q.vote_for(current_user).is_up? %>
                                              <!-- note: checking if there is a vote for a specific user -->
    <%= link_to fa_icon("arrow-up"), question_vote_path(@q, @q.vote_for(current_user)), class: "icon-big text-danger", method: :delete %>
              <!-- in this scenario we need to check if the current_user has a vote for this question and also need to set is_up to false -->
    <%= link_to fa_icon("arrow-down"), question_vote_path(@q, @q.vote_for(current_user), {vote: {is_up: false}}), class: "icon-big", method: :patch %>
  <% elsif !@q.vote_for(current_user).is_up? %>
    <%= link_to fa_icon("arrow-up"), question_vote_path(@q, @q.vote_for(current_user), {vote: {is_up: true}}), class: "icon-big", method: :patch %>
    <%= link_to fa_icon("arrow-down"), question_vote_path(@q, @q.vote_for(current_user)), class: "icon-big text-danger", method: :delete %>
<% end  %>

  <%= @q.vote_result %>
</div>
<!--  -->
  <h2>Submit an Answer</h2>

<!-- attach errors if any -->
  <%= @answer.errors.full_messages.join(", ") %>
<!-- without specifying the path helper it will try and submit to the answers_path
as it is following the standard rails conventions for CRUD
However we have nested the answers routes inside the questions routes
form_for @answer, the action will be answers_path if @answer is not persisted  in db
meaning its Answer.new. if @answer is persisted, the action will be answer_path(@answer)-->

<%#= form_for @answer, url: question_answers_path(@q) do |f| %>
<!-- passing the [@q, @answer] to the form helper generates the path action="/questions/:id/answers" for this form-->
<%= form_for [@q, @answer] do |f| %>  <!-- shortcut of above, benefit of using the answers routes nested within questions
note that @q must persist for this to work -->
<div class="form-group">
  <%= f.label :body %>
  <%= f.text_area :body, class: "form-control" %>
</div>
<div class="form-group">
  <%= f.submit class: "btn btn-primary" %>
</div>
  <% end %>

<h2>Answers</h2>
<% @q.answers.each do |answer|  %>
  <div class="well">
      <%= answer.body %>   <!-- Note: using answer for current answer, not @answer -->
    <% if(can? :destroy, answer) %> <!-- removed '|| (can? :destroy, @q)' -->
      <%= link_to "Delete", question_answer_path(@q, answer), method: :delete,
                          class: "btn btn-danger delete-right", data: {confirm: "Are you sure?"}%>
                            <!-- can also use 'pull-right' bootstrap class to float right-->
    <% end %>
  </div>
<% end  %>
